from pydantic import BaseModel, Field, HttpUrl, ConfigDict
from typing import List, Optional, Literal

# --- Import Schemas from Services/Core ---
from app.core.schemas import UsageStatistics, SearchTask # Changed to absolute import
from ..services.search import SearchResult # Import SearchResult from the service


# --- Schemas Specific to Deep Research Agency ---



class SectionItem(BaseModel):
    """Defines a single section within the writing plan."""
    model_config = ConfigDict(extra='ignore')
    title: str = Field(..., description="Title for this section of the report.", min_length=1)
    guidance: str = Field(..., description="Specific instructions or guidance for writing this section.", min_length=1)

class WritingPlan(BaseModel):
    """Defines the structure and directives for the final report, generated by the Planner LLM."""
    model_config = ConfigDict(extra='ignore')
    overall_goal: str = Field(..., description="The main objective or purpose of the research report.", min_length=1)
    desired_tone: Optional[str] = Field(None, description="Preferred writing style or tone (e.g., formal, neutral, technical).")
    sections: List[SectionItem] = Field(..., description="An ordered list of sections that should constitute the report.", min_items=1)
    additional_directives: Optional[List[str]] = Field(None, description="Any extra high-level instructions for the Writer LLM.")

    @property
    def outline(self) -> List[str]:
        """Provides a simple list of section titles, primarily for backward compatibility or simple display."""
        return [section.title for section in self.sections]

class PlannerOutput(BaseModel):
    """Validates the structured JSON output expected from the Planner LLM."""
    model_config = ConfigDict(extra='ignore')
    search_tasks: List[SearchTask] = Field(..., description="List of search tasks to be executed based on the user query.", min_items=1)
    writing_plan: WritingPlan = Field(..., description="Detailed plan guiding the structure and content of the final report.")

class SourceSummary(BaseModel):
    """Represents processed information derived from a single web source, either a summary or aggregated chunks, used within the agency orchestration."""
    model_config = ConfigDict(extra='ignore')
    title: str = Field(..., description="The title of the web source (e.g., from <title> tag or search result).", min_length=1)
    link: HttpUrl = Field(..., description="The URL of the original web source.")
    content: str = Field(..., description="The processed content: either an LLM-generated summary or concatenated relevant text chunks.", min_length=1)
    content_type: Literal['summary', 'chunks'] = Field(..., description="Specifies whether the 'content' field holds a summary or concatenated chunks.")
    rank: Optional[int] = Field(None, description="Sequential citation rank assigned during processing.")
    # Removed original_title as likely unused

class SearchRequest(BaseModel):
    """Validates a search request extracted from the Writer/Refiner LLM's output (e.g., <search_request query='...'>)."""
    model_config = ConfigDict(extra='ignore')
    query: str = Field(..., description="The specific search query requested by the LLM to gather more information.", min_length=1)

class WriterOutput(BaseModel):
    """Structured output for the Writer and Refiner agents."""
    model_config = ConfigDict(extra='allow') # Allow extra fields temporarily if needed, tighten later
    report_content: str = Field(..., description="The generated report content in Markdown format.")
    requested_searches: Optional[List[SearchRequest]] = Field(None, description="Optional list of search tasks requested by the agent if critical information is missing.")

# --- API Schemas (Will move to app/api/ later) ---

class ResearchRequest(BaseModel):
    """Request schema for the main `/research` endpoint."""
    model_config = ConfigDict(extra='ignore')
    query: str = Field(..., min_length=10, description="The user's research query.")
    max_search_tasks: Optional[int] = Field(None, description="Override maximum initial search tasks.")


from app.core.schemas import UsageStatistics

class ResearchResponse(BaseModel):
    """Response schema for the main `/research` endpoint."""
    model_config = ConfigDict(extra='ignore')
    report: str = Field(..., description="The final generated research report in Markdown format.")
    usage_statistics: UsageStatistics = Field(..., description="Detailed statistics about resource usage (tokens, cost, API calls).")

